# Реализовать класс Matrix (матрица).
# Подсказка: матрица — система некоторых математических величин,
# расположенных в виде прямоугольной схемы.
#
# Формат вывода результата:
#     1. Создать несколько матриц
#     2. Вывести их с помощью print
#     3. Выполнить сложение матриц и вывести результат сложения.
#
# Техническое задание:
#     1. Данные в матрице хранятся как список списков целых чисел.
#     Реализовать это через перезгрузку конструктора.
#     2. Реализовать перегрузку метода __str__() для вывода матрицы в привычном виде
#     - как в примере. Выравнивание чисел не обязательно, но желательно.
#     Метод __str__() возвращает строку.
#     3. Реализовать перегрузку метода __add__() для сложения двух объектов класса Matrix
#     (двух матриц). Результатом сложения должна быть новая матрица.
#     Метод __add__() возвращает новую матрицу.
#     Исходные матрицы остаются неизменными.
#     4. Сложение элементов матриц выполнять поэлементно.
#     Первый элемент первой строки первой матрицы складываем
#     с первым элементом первой строки второй матрицы и пр.
#     5. Подумайте о проверках корректности данных при создании матрицы и при их сложении


class Matrix:

    def __init__(self, matrix):
        self.__matrix = matrix
        rows = len(self.__matrix)
        self.__size = frozenset([(rows, len(row)) for row in self.__matrix])

        if len(self.__size) != 1:
            raise ValueError("Incorrect data for Matrix initialization: not equal length of lists")

    def __add__(self, other):
        if self.__size != other.__size:
            raise ValueError("Incorrect dimensions for add method")

        result = list()
        for item in zip(self.__matrix, other.__matrix):
            result.append([sum([j, k]) for j, k in zip(*item)])
        return Matrix(result)

    def __str__(self):
        return '\n'.join(['\t'.join(map(str, row)) for row in self.__matrix]) + '\n'


if __name__ == '__main__':
    m1 = Matrix([[11, 2, 3], [4, 5, 6], [117, 8, 9]])
    m2 = Matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
    print(m1)
    print(m2)
    m4 = m1 + m2
    print(m4)
    # m3 = Matrix([[1,1],[1,1],[1,1]])
    # m5 = m1 + m3
    # print(5)
    # m6 = Matrix([[1, 1, 1, 1], [1, 1, 1], [1, 1, 1]])
    # print(6)
